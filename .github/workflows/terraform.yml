name: Terraform Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch: # Habilita la ejecuci√≥n manual
    inputs:
      action:
        description: "Choose action: init, plan, apply, or destroy"
        required: true
        default: "plan"
        type: choice
        options:
          - "init"
          - "plan"
          - "apply"
          - "destroy"
jobs:
  init:
    name: Terraform Init
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # 4. Terraform Init
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: init # Este job depende de 'init'

    if: github.event.inputs.action == 'apply' # Solo se ejecuta si 'apply' es seleccionado
    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # 4. Terraform Plan
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan # Este job depende de 'plan'

    if: github.event.inputs.action == 'apply' # Solo se ejecuta si 'apply' es seleccionado
    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # 4. Terraform Apply
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest

    if: github.event.inputs.action == 'destroy' # Solo se ejecuta si 'destroy' es seleccionado
    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # 4. Terraform Destroy
      - name: Terraform Destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve
